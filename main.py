# main.py
import os
import asyncio
from typing import TypedDict, Dict, Any

from dotenv import load_dotenv
from openai import AzureOpenAI, OpenAI

client: OpenAI | AzureOpenAI  # Accept both types for mypy
from langgraph.graph import StateGraph, END
from utils.notion_client import NotionStoryManager
from agents.idea_generator_agent import ideaAgentNode

# ------------------------------------------------------------------
# Load environment + OpenAI client
# ------------------------------------------------------------------
load_dotenv()

# Debug environment variables
print("Environment variables loaded:")
print(f"NOTION_TOKEN: {os.getenv('NOTION_TOKEN') is not None}")
print(f"NOTION_DATABASE_ID: {os.getenv('NOTION_DATABASE_ID')}")
print(f"OPENAI_API_KEY: {os.getenv('OPENAI_API_KEY') is not None}")

OPENAI_API_TYPE = os.getenv("OPENAI_API_TYPE", "openai")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")

# Azure-specific
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE")
OPENAI_API_VERSION = os.getenv("OPENAI_API_VERSION")
OPENAI_DEPLOYMENT_NAME = os.getenv("OPENAI_DEPLOYMENT_NAME")

if not OPENAI_API_KEY:
    raise RuntimeError("Missing OPENAI_API_KEY in .env")

if OPENAI_API_TYPE.lower() == "azure":
    if not (OPENAI_API_BASE and OPENAI_API_VERSION and OPENAI_DEPLOYMENT_NAME):
        raise RuntimeError("Missing Azure OpenAI configuration in .env")
    client = AzureOpenAI(
        api_key=OPENAI_API_KEY,
        api_version=OPENAI_API_VERSION,
        azure_endpoint=OPENAI_API_BASE,
    )
else:
    client = OpenAI(api_key=OPENAI_API_KEY)


# ------------------------------------------------------------------
# Define state structure for LangGraph
# ------------------------------------------------------------------
class StoryState(TypedDict, total=False):
    """Shared state passed between LangGraph nodes."""

    # user-supplied idea
    prompt: str

    # outputs generated by each agent stage
    ideas: str  # generated story ideas
    setting: str  # time, place, mood
    characters: str  # main characters introduction
    conflict: str  # central problem or tension
    resolution: str  # story conclusion

    # final stitched story
    story: str

    # Notion integration
    notion_page_id: str


# ------------------------------------------------------------------
# OpenAI call helper
# ------------------------------------------------------------------
def llm(prompt: str, max_tokens: int = 600) -> str:
    if OPENAI_API_TYPE.lower() == "azure":
        if not OPENAI_DEPLOYMENT_NAME:
            raise RuntimeError("OPENAI_DEPLOYMENT_NAME must be set for Azure OpenAI.")
        resp = client.chat.completions.create(
            model=str(OPENAI_DEPLOYMENT_NAME),
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.8,
        )
    else:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.8,
        )
    content = resp.choices[0].message.content
    return content.strip() if content else ""


# ------------------------------------------------------------------
# Story Graph Nodes
# ------------------------------------------------------------------
def make_setting(state: StoryState) -> StoryState:
    """Generate the story's setting (time, place, mood)."""

    prompt = f"""
You are a creative storyteller.
Given these story ideas and the user's original prompt:

Original prompt: {state.get('prompt', '')}

Generated ideas:
{state.get('ideas', 'No specific ideas generated.')}

Choose one of these ideas or combine elements from multiple ideas, and describe an engaging SETTING for the story, including:
1. Time period or era
2. Place / world description
3. Overall mood or atmosphere

Respond in 2-3 concise paragraphs.
"""

    return {"setting": llm(prompt)}


def make_characters(state: StoryState) -> StoryState:
    """Introduce main character(s) based on the setting."""

    prompt = f"""
Story SETTING:
{state.get('setting', '')}

Based on the above setting, introduce 2-3 MAIN CHARACTERS. For each character provide:
‚Ä¢ Name
‚Ä¢ Brief role/description
‚Ä¢ Goal or motivation
‚Ä¢ 1 unique trait

Return the characters as a bullet list.
"""

    return {"characters": llm(prompt)}


def make_conflict(state: StoryState) -> StoryState:
    """Introduce the central problem or tension in the story."""

    prompt = f"""
SETTING:
{state.get('setting', '')}

CHARACTERS:
{state.get('characters', '')}

Describe the CENTRAL CONFLICT that will drive the plot. Explain the main problem or tension the characters face. Keep it to one strong paragraph (you may include brief sub-points if helpful).
"""

    return {"conflict": llm(prompt)}


def make_resolution(state: StoryState) -> StoryState:
    """Provide a satisfying conclusion or resolution."""

    prompt = f"""
SETTING:
{state.get('setting', '')}

CHARACTERS:
{state.get('characters', '')}

CONFLICT:
{state.get('conflict', '')}

Write a RESOLUTION that ties up the story in a satisfying way, addressing the conflict and showing how the characters change or what they achieve. Limit to roughly two paragraphs.
"""

    return {"resolution": llm(prompt)}


def combine_story(state: StoryState) -> StoryState:
    """Combine all parts into a single readable story outline."""

    story = (
        "# Story Draft\n\n"
        "## Inspiration\n" + state.get("ideas", "No specific ideas generated.") + "\n\n"
        "## Setting\n" + state.get("setting", "") + "\n\n"
        "## Characters\n" + state.get("characters", "") + "\n\n"
        "## Conflict\n" + state.get("conflict", "") + "\n\n"
        "## Resolution\n" + state.get("resolution", "")
    )

    return {"story": story}


def save_to_notion(state: StoryState) -> StoryState:
    """Save the generated story to Notion database."""

    try:
        # Check if Notion environment variables are set
        notion_token = os.getenv("NOTION_TOKEN")
        notion_db_id = os.getenv("NOTION_DATABASE_ID")

        print(
            f"Notion configuration: Token exists={bool(notion_token)}, DB ID exists={bool(notion_db_id)}"
        )
        print(f"Notion DB ID: {notion_db_id}")

        if not notion_token or not notion_db_id:
            print(
                f"‚ö†Ô∏è Missing Notion configuration: Token={bool(notion_token)}, DB ID={bool(notion_db_id)}"
            )
            return {"notion_page_id": ""}

        # Initialize Notion client
        print("Initializing NotionStoryManager...")
        try:
            notion_manager = NotionStoryManager()
            print("NotionStoryManager initialized successfully")
        except Exception as init_error:
            print(f"‚ùå Error initializing NotionStoryManager: {init_error}")
            import traceback

            print(traceback.format_exc())
            return {"notion_page_id": ""}

        # Prepare story data for Notion
        story_data = {
            "prompt": state.get("prompt", ""),
            "ideas": state.get("ideas", ""),  # Include generated ideas
            "setting": state.get("setting", ""),
            "characters": state.get("characters", ""),
            "conflict": state.get("conflict", ""),
            "resolution": state.get("resolution", ""),
            "story": state.get("story", ""),
        }

        # Save to Notion
        print("Saving to Notion database...")
        try:
            response = notion_manager.create_story_page(story_data)
            # Add the Notion page ID to the state for reference
            notion_page_id = response.get("id", "")
            print(
                f"‚úÖ Successfully saved to Notion! Page ID: {notion_page_id[:8] if notion_page_id else 'None'}..."
            )
            return {"notion_page_id": notion_page_id}
        except Exception as create_error:
            print(f"‚ùå Error creating Notion page: {create_error}")
            import traceback

            print(traceback.format_exc())
            return {"notion_page_id": ""}

    except Exception as e:
        print(f"‚ùå Error saving to Notion: {e}")
        import traceback

        print(traceback.format_exc())
        # Return empty dict to continue workflow even if Notion save fails
        return {"notion_page_id": ""}


# ------------------------------------------------------------------
# Build and compile the graph (4-stage workflow)
# ------------------------------------------------------------------
workflow = StateGraph(StoryState)

# Add nodes to the graph
workflow.add_node("generate_ideas", ideaAgentNode)  # New idea generator node
workflow.add_node("setting", make_setting)
workflow.add_node("characters", make_characters)
workflow.add_node("conflict", make_conflict)
workflow.add_node("resolution", make_resolution)
workflow.add_node("combine", combine_story)
workflow.add_node("save_to_notion", save_to_notion)

# Sequential flow with idea generator as the entry point
workflow.set_entry_point("generate_ideas")
workflow.add_edge("generate_ideas", "setting")
workflow.add_edge("setting", "characters")
workflow.add_edge("characters", "conflict")
workflow.add_edge("conflict", "resolution")
workflow.add_edge("resolution", "combine")
workflow.add_edge("combine", "save_to_notion")
workflow.add_edge("save_to_notion", END)

app = workflow.compile()

# ------------------------------------------------------------------
# Run it!
# ------------------------------------------------------------------
if __name__ == "__main__":
    user_input = input("Enter a theme or concept for story ideas: ")

    # Run the synchronous LangGraph workflow
    result = app.invoke({"prompt": user_input})  # type: ignore

    # Display generated ideas
    if result.get("ideas"):
        print("\nüí° Generated Story Ideas:\n")
        print(result["ideas"])
        print("\n" + "-" * 50 + "\n")

    # Display the final story
    print("\nüìñ Final Story Output:\n")
    print(result["story"])

    # Show Notion integration status
    if result.get("notion_page_id"):
        print(f"\n‚úÖ Story saved to Notion! Page ID: {result['notion_page_id']}")
    else:
        print("\n‚ö†Ô∏è  Story was not saved to Notion (check your configuration)")
